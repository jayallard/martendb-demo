---
# quick reference
# ----------------------
# docker-compose up -d
# docker-compose ps
# docker logs kafkaInit
version : '3.8'
services :
  zookeeper :
    image : confluentinc/cp-zookeeper:latest
    hostname : zookeeper
    container_name : mdb-zookeeper
    ports :
      - "${ZOOKEEPER_HOST_PORT}:${ZOOKEEPER_HOST_PORT}"
    environment :
      ZOOKEEPER_CLIENT_PORT : ${ZOOKEEPER_HOST_PORT}
      ZOOKEEPER_TICK_TIME : 2000

  broker :
    image : confluentinc/cp-server:latest
    hostname : broker
    container_name : mdb-broker
    depends_on :
      - zookeeper
    ports :
      - "${KAFKA_BROKER_PORT_HOST}:${KAFKA_BROKER_PORT_HOST}"
      - "${KAFKA_JMX_PORT_HOST}:${KAFKA_JMX_PORT_HOST}"
    environment :
      KAFKA_BROKER_ID : 1
      KAFKA_ZOOKEEPER_CONNECT : 'zookeeper:${ZOOKEEPER_HOST_PORT}'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP : PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS : PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:${KAFKA_BROKER_PORT_HOST}
      KAFKA_METRIC_REPORTERS : io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR : 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS : 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR : 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR : 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR : 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR : 1
      KAFKA_JMX_PORT : ${KAFKA_JMX_PORT_HOST}
      KAFKA_JMX_HOSTNAME : localhost
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS : broker:${KAFKA_BROKER_PORT_HOST}
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS : 1
      CONFLUENT_METRICS_ENABLE : 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID : 'anonymous'
  kafkaInit :
    # create topics after the broker starts.
    image : confluentinc/cp-kafka:latest
    container_name : mdb-kafka-init
    depends_on :
      - broker
    entrypoint : [ '/bin/sh', '-c' ]
    command : |
      "
      # blocks until kafka is reachable
      echo -e 'waiting for kafka to finish starting'
      kafka-topics --bootstrap-server ra6broker:29092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic demo-topic-1
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic demo-topic-2
      
      echo -e '--------- list of topics ---------------------'
      kafka-topics --bootstrap-server broker:29092 --list
      "
  postgres :
    image : postgres:latest
    container_name : mdb-postgres
    environment :
      POSTGRES_PASSWORD : ${POSTGRES_PASSWORD}
    ports: 
      - "${POSTGRES_HOST_PORT}:5432"
  pgadmin:
    container_name: mdb-postgres-admin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_USER}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_PASSWORD}"
    ports:
      - "5050:80"

# change the network name so that it doesn't conflict with other projects,
# or use an existing network accidentally.
# by default, it uses the folder name, and there could be man folders named "docker", or whatever
# your convention is.
networks :
  default :
    name : ${NETWORK_NAME}
      